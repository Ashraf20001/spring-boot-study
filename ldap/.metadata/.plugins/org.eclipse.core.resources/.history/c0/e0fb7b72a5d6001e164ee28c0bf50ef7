package com.demo.ldap.service;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.time.LocalDateTime;
import java.util.Base64;
import java.util.List;
import java.util.UUID;

import javax.naming.Name;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ldap.core.DirContextAdapter;
import org.springframework.ldap.core.LdapTemplate;
import org.springframework.ldap.support.LdapNameBuilder;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import com.demo.ldap.dto.UserDto;
import com.demo.ldap.entity.Role;
import com.demo.ldap.entity.User;
import com.demo.ldap.sql.repository.UserRepository;

import jakarta.transaction.Transactional;

@Service
public class UserService {

		@Autowired
		private UserRepository userRepository;
		
		@Autowired
		private LdapTemplate ldapTemplate;
		
		@Transactional(rollbackOn = Exception.class)	
		public void saveUserDetails(UserDto user) throws Exception {
			if(user==null) {
				throw new Exception("User Information is not valid");
			}
			BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();
			if(user.getPassword()==null) {
				throw new Exception("Password should not be null");
			}
			User existingUserDetails = userRepository.findByUserName(user.getUserName());
			if(existingUserDetails!=null) {
				throw new Exception("User already exist");
			}
			
			String encryptedPassword = encoder.encode(user.getPassword());
			User userDetails = convertDtoToUser(user,encryptedPassword);
			userRepository.save(userDetails);
			
			// save user to LDAP
			create(user.getUserName(),user.getPassword());
			
		}

		private User convertDtoToUser(UserDto user, String encryptedPassword) {
			User userDetails = new User();
			Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
			User loggedInUserDetails = (User)authentication.getPrincipal();
			userDetails.setUserName(user.getUserName());
			userDetails.setEmailId(user.getEmailId());
			userDetails.setPassword(encryptedPassword);
			userDetails.setIdentity(UUID.randomUUID().toString());
			userDetails.setCreatedDate(LocalDateTime.now());
			userDetails.setCreatedBy(loggedInUserDetails.getUserId().intValue());
			userDetails.setModifiedDate(LocalDateTime.now());
			userDetails.setModifiedBy(loggedInUserDetails.getUserId().intValue());
			
			
			List<Role> roleList = user.getRoles().stream()
							.map(role->setRoles(role, userDetails)).toList();
			userDetails.setRoleList(roleList);
		
			return userDetails;
			
		}
		
		private Role setRoles(String roleName,User userDetails){
			Role role = new Role();
			role.setCreatedDate(LocalDateTime.now());
			role.setCreatedBy(userDetails.getCreatedBy());
			role.setModifiedDate(LocalDateTime.now());
			role.setModifiedBy(userDetails.getModifiedBy());
			role.setRoleName(roleName);
			role.setUser(userDetails);
			return role;
		}
		
		private void create(String username, String password) {
		    Name dn = LdapNameBuilder
		      .newInstance()
		      .add("ou", "users")
		      .add("cn", username)
		      .build();
		    DirContextAdapter context = new DirContextAdapter(dn);

		    context.setAttributeValues(
		      "objectclass", 
		      new String[] 
		        { "top", 
		          "person", 
		          "organizationalPerson", 
		          "inetOrgPerson" });
		    context.setAttributeValue("cn", username);
		    context.setAttributeValue("sn", username);
		    context.setAttributeValue
		      ("userPassword", digestSHA(password));

		    ldapTemplate.bind(context);
		}
		
	    private String digestSHA(final String password) {
	        String base64;
	        try {
	            MessageDigest digest = MessageDigest.getInstance("SHA");
	            digest.update(password.getBytes());
	            base64 = Base64
	              .getEncoder()
	              .encodeToString(digest.digest());
	        } catch (NoSuchAlgorithmException e) {
	            throw new RuntimeException(e);
	        }
	        return "{SHA}" + base64;
	    }
}